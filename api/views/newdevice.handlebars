<script>
    function setVisibility(type, visible) {
        const allSectionElements = document.getElementsByClassName("section-" + type);
        for (let i = 0; i < allSectionElements.length; i++) {
            allSectionElements[i].toggleAttribute("hidden", !visible)

            if (visible && allSectionElements[i].tagName === "CANVAS") {
                //when showing canvases, synthesize a resize event so paper3d adjusts
                var resizeEvent = window.document.createEvent('UIEvents'); 
                resizeEvent.initUIEvent('resize', true, false, window, 0); 
                allSectionElements[i].dispatchEvent(resizeEvent);
            }
        }
    }

    function onModeSelect(v) {
        setVisibility("single", v == "single");
        setVisibility("specified", v == "specified");
        setVisibility("drawn", v == "drawn");
    }

    function onDeviceModeSelect(v) {
        setVisibility("serial", v == "serial");
        setVisibility("list", v == "list");
    }

</script>
<script src="/javascripts/combobox.js" defer></script>
<script type="module">
    import { startEnrollment } from "/javascripts/improvSerialProvision.js";
    window.startEnrollment = () => startEnrollment({wifiSsid: "{{wifiSsid}}", wifiPassword: "{{wifiPassword}}"});
</script>
<div class="newdevicesform">
    <form method="POST">
    {{!-- device identification --}}

    <div data-initially-hidden {{#if existing}}hidden {{/if}}class="newdevicesform__devicemode-select">
        <input type="radio" id="list" name="devicemode" value="list" checked onchange="onDeviceModeSelect('list')" />
        <label for="list">Select from list of discovered devices</label>

        <input type="radio" id="serial" name="devicemode" value="serial" onchange="onDeviceModeSelect('serial')" />
        <label for="serial">Provision via Serial (USB)</label>
    </div>
    
    {{!-- TODO: refresh this list / make it live, include more info to help choose like firstSeen and online status --}}
    <label class="newdevicesform__host-label section-list" for="host">IP Address</label>
    {{#if existing}}
    <div class="newdevicesform__host-input">
        <input id="host" class="newdevicesform__host-input" type="text" name="host" readOnly value="{{existing.host}}"/>
    </div>
    {{else}}
    {{!-- Taken from https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-autocomplete-list/ --}}
    <div class="combobox combobox-list section-list newdevicesform__host-input">
        <div class="group">
            <input id="host" class="cb_edit newdevicesform__host-input" type="text" role="combobox" autocomplete="off" aria-autocomplete="list" aria-expanded="false"
                aria-controls="newdevicesform__host-input-controls" name="host">
            <button type="button" id="cb1-button" tabindex="-1" aria-label="States" aria-expanded="false" aria-controls="cb1-listbox" data-initially-hidden>
                <svg width="18" height="16" aria-hidden="true" focusable="false" style="forced-color-adjust: auto">
                    <polygon class="arrow" stroke-width="0" fill-opacity="0.75" fill="currentcolor" points="3,6 15,6 9,14">
                    </polygon>
                </svg>
            </button>
        </div>
        <ul id="newdevicesform__host-input-controls" role="listbox" aria-label="IP Addresses">
            {{#each unregisteredDevices}}
            <li role="option" data-text="{{host}}">
                <div>
                    <h3>{{host}}</h3>
                    <div>First Seen: {{formatDate firstSeen}}</div>
                    <div><span class="statusIcon {{#if up}}statusIcon--up{{else}}statusIcon--down{{/if}}"></span>{{#if up}}{{else}}<span> Last Up: {{formatDate lastUp}}</span>{{/if}}</div>
                </div>
            </li>
            {{/each}}
        </ul>
    </div>
    {{/if}}

    <button type="button" class="newdevicesform__provision-button section-serial" onClick="window.startEnrollment(); return false;">Provision</button>
    <div class="newdevicesform__provision-message newdevicesform__provision-message--hidden"></div>

    {{!-- Location --}}
    <p class="newdevicesform__info">Device Location</p>
    <label class="newdevicesform__x-label" for="x">X</label><input class="newdevicesform__x-input" id="x" name="x" value="{{existing.x}}"/>
    <label class="newdevicesform__y-label" for="y">Y</label><input class="newdevicesform__y-input" id="y" name="y" value="{{existing.y}}"/>

    {{!-- pixel layout --}}
    <p class="newdevicesform__info">The layout of individual pixels is used to give some local interest to the pattern.
        This isn't trying to accurately place individual pixels on the whole field and doesn't therefore have any units
        (the values entered are normalised before being used)</p>
    <div class="newdevicesform__mode-select">
        <div>
            <input type="radio" id="single" name="mode" value="single" checked onchange="onModeSelect('single')" />
            <label for="single">Single colour</label>
        </div>
        <div>
            <input type="radio" id="specified" name="mode" value="specified" onchange="onModeSelect('specified')" />
            <label for="specified">Specified position</label>
        </div>
        <div data-initially-hidden>
            <input type="radio" id="drawn" name="mode" value="drawn" onchange="onModeSelect('drawn')" />
            <label for="drawn">Drawn position</label>
        </div>
    </div>
    <div class="newdevicesform__info newdevicesform__info--single section-single">All pixels have the same colour.</div>
    
    <div class="newdevicesform__info newdevicesform__info--specified section-specified">Specify the location of the pixels. e.g. <pre>[[0,10],[50,5]]</pre>.</div>
    <label class="newdevicesform__pixelLocations-label section-specified" for="pixelLocations">pixel locations</label><textarea class="newdevicesform__pixelLocations-input section-specified" id="pixelLocations" name="pixelLocations" rows="5">{{existing.pixelJSON}}</textarea>
    
    <div class="newdevicesform__info newdevicesform__info--drawn section-drawn">Specify the number of pixels and draw the shape of their layout as seen from above.</div>
    <label class="newdevicesform__pixelCount-label section-drawn" for="pixelCount">pixel count</label><input class="newdevicesform__pixelCount-input section-drawn" id="pixelCount" name="pixelCount" type="number" value="{{default existing.pixelCount 50}}"/>
    <script type="text/paperscript" canvas="pixelLocationsCanvas">
        //TODO: add a grid to align drawing
        //TOOD: add an edit/reset interface instead of expecting it to be perfect first time!
        var group;
        var path;

        function onMouseDown(event) {
            // If we produced a path before, remove it:
            if (group) {
                group.remove();
            }

            // Create a new path and set its stroke color to black:
            path = new Path({
                segments: [event.point],
                strokeColor: 'black'
            });

            group = new Group([path])
        }

        // While the user drags the mouse, points are added to the path
        // at the position of the mouse:
        function onMouseDrag(event) {
            path.add(event.point);
        }

        // When the mouse is released, we simplify the path:
        function onMouseUp(event) {
            if (path.length > 0) {
                path.simplify(50);

                var pointsArr = []

                var segmentCount=document.getElementById("pixelCount").value - 1;
                for (var i = 0; i <= segmentCount; i++) {
                    var point = path.getPointAt(path.length * i / segmentCount);
                    var circle = new Path.Circle({
                        center: point,
                        radius: 3,
                        fillColor: 'red'
                    });
                    group.addChild(circle);

                    var decimalPlaces = 1;
                    pointsArr.push([+point.x.toFixed(decimalPlaces), +point.y.toFixed(decimalPlaces)]);
                }

                document.getElementById("drawnPixelLocations").value = JSON.stringify(pointsArr)
                {{!-- console.log(pointsArr); --}}
            }
        }

    </script>

    <canvas id="pixelLocationsCanvas" resize class="section-drawn" data-initially-hidden></canvas>
    <label class="newdevicesform__drawnPixelLocations-label section-drawn" for="drawnPixelLocations" data-initially-hidden>pixel locations</label><textarea class="newdevicesform__drawnPixelLocations-input section-drawn" id="drawnPixelLocations" name="drawnPixelLocations" readOnly rows="5" data-initially-hidden>{{existing.pixelJSON}}</textarea>

    <input type="submit"/>
    </form>
</div>
<script>
    onDeviceModeSelect('list');
    {{#if existing.multiplePixels}}
    onModeSelect('drawn');
    {{else }}
    onModeSelect('single');
    {{/if}}
</script>